- name: tmp key directory
  file:
    path: /tmp/apt_keys/
    state: directory

- name: copy apt_keys
  copy:
   src: "{{item.src}}"
   dest: "{{item.dest}}" #/{{item.src}}"
#   checksum: yes
  with_items: "{{apt_keys}}"
#  notify:

# - name: apt-key install
#   apt_key:
#    file: "{{item.dest}}/{{item.src}}"
#    state: present
#   with_items: "{{apt_keys}}"

- name: "apt: proxy setup install"
  template:
    src: apt-00proxy.j2
    dest: /etc/apt/apt.conf.d/00proxy
    owner: root
    group: root
  when: not apt_proxy == ""

- name: "apt: proxy setup remove"
  file:
   path: "/etc/apt/apt.conf.d/00proxy"
   state: absent
  when: apt_proxy == ""

- name: stat sources.list
  stat:
    path: /etc/apt/sources.list
  register: sl


- name: Move sources.list to sources.list.backup
  command: mv /etc/apt/sources.list /etc/apt/sources.list.backup
  when: sl.stat.exists

- apt_repository:
   repo: "{{item}}"
   state: present
  with_items: "{{apt_sourceslist}}"

- name: "install list"
  apt:
   pkg: "{{ apt_packages }}"
   state: latest
   cache_valid_time: "{{60 * 60 * 6 }}"

- name: install Cocpit from backport
  apt:
   pkg: cockpit
   state: present
   default_release: "{{ ansible_lsb['codename'] }}-backports"
  ignore_errors: yes

- name: upgrade, autoclean and autoremove packages
  apt:
   upgrade: yes
   autoremove: yes
   autoclean: yes

- name: Check if a reboot is required
  stat:
   path: /var/run/reboot-required
   get_checksum: no
  register: reboot_required_file
  notify: Reboot

- debug:
    var: reboot_required_file
